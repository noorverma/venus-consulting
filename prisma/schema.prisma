generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  appointments       Appointment[]
  JobApplication     JobApplication[]
  MarketplaceListing MarketplaceListing[]
  MarketplaceMessage MarketplaceMessage[]
}

model Appointment {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String
  reason    String
  date      DateTime
  time      String
  userId    String?
  createdAt DateTime @default(now())
  status    String   @default("Pending")
  user      User?    @relation(fields: [userId], references: [id])
}

model Message {
  id        Int       @id @default(autoincrement())
  sender    String
  message   String
  timestamp DateTime  @default(now())
  replyToId Int?
  replyTo   Message?  @relation("ReplyTo", fields: [replyToId], references: [id])
  replies   Message[] @relation("ReplyTo")
}

model JobPosting {
  id              Int              @id @default(autoincrement())
  title           String
  description     String
  location        String
  salary          String
  requirements    String
  createdAt       DateTime         @default(now())
  jobApplications JobApplication[]
}

model JobApplication {
  id           Int        @id @default(autoincrement())
  name         String
  email        String
  resume       String
  jobPostingId Int
  userId       String?
  createdAt    DateTime   @default(now())
  jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id])
  user         User?      @relation(fields: [userId], references: [id])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Float
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviews     Review[]  // Relation to Review model
}

model Review {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Int      // Rating from 1 to 5
  comment   String?  // Optional comment
  createdAt DateTime @default(now())
}

model MarketplaceListing {
  id                 Int                  @id @default(autoincrement())
  title              String
  description        String
  price              Float
  imageUrl           String
  createdAt          DateTime             @default(now())
  sellerId           String
  User               User                 @relation(fields: [sellerId], references: [id])
  MarketplaceMessage MarketplaceMessage[]
}

model MarketplaceMessage {
  id                 Int                @id @default(autoincrement())
  content            String
  timestamp          DateTime           @default(now())
  senderId           String
  listingId          Int
  MarketplaceListing MarketplaceListing @relation(fields: [listingId], references: [id])
  User               User               @relation(fields: [senderId], references: [id])
}
